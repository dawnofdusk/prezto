# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
# Customized by:
#   Jesse Lin

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/base16-ocean.dark.sh"
[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL

# variables
export ALTERNATIVE_EDITOR=emacs
export EDITOR='emacsclient -c -a emacs'
export VISUAL='emacsclient -c'
#export PAGER='vimpager'
#export TERM='rxvt-unicode'

# bindings
bindkey -M vicmd 'K' run-help
bindkey -M viins '' accept-line-and-down-history
bindkey -M vicmd '' accept-line-and-down-history

# aliases
alias sudo='nocorrect sudo'
alias echol='ls -ABrt1 --group-directories-first | tail -n1'
alias rtach='dtach -a /tmp/dtach'
alias cal='cal -3'
x() {
	dtach -A /tmp/$1 zsh
}
alias edit="$EDITOR"

# urxvt window hooks
    # Write some info to terminal title.
    # This is seen when the shell prompts for input.
    _titleprecmd() {
      print -Pn "\e]0;zsh%L %(1j,%j job%(2j|s|); ,)%~\a"
    }
    # Write command and args to terminal title.
    # This is seen while the shell waits for a command to complete.
    _titlepreexec() {
      printf "\033]0;%s\a" "$1"
    }
add-zsh-hook precmd _titleprecmd
add-zsh-hook preexec _titlepreexec

#_tmuxstatusprecmd() {
#    tmux set -qg status-right "#[fg=blue] #(pwd) #[fg=yellow] %d %b %Y #[fg=green] %l:%M %p"
#}
#add-zsh-hook precmd _tmuxstatusprecmd

#
# functions
#
function ediff () {
    if [ "X${2}" = "X" ]; then
        echo "USAGE: ediff <FILE 1> <FILE 2>"
    else
        quoted1=${1//\\/\\\\}; quoted1=${quoted1//\"/\\\"}
        quoted2=${2//\\/\\\\}; quoted2=${quoted2//\"/\\\"}
        emacsclient -c -a emacs -e "(ediff \"$quoted1\" \"$quoted2\")"
    fi
}

# updating
fedu() {
       sudo dnf upgrade &&
       flatpak update
}
syu() {
	trap "echo 'Unmounting /boot' ; sudo umount /boot" EXIT SIGINT SIGTERM
	if [ -n $(ls -A /boot 2> /dev/null)  ]
	then
		sudo mount /boot &&
	fi
	sudo pacnanny -Syu
}
syua() {
	trap "echo 'Unmounting /boot' ; sudo umount /boot" EXIT SIGINT SIGTERM
	if [ -n $(ls -A /boot 2> /dev/null)  ]
	then
		sudo mount /boot &&
	fi
	pacaur -Syua
}
# secure paste
pp() {
    # remember output, prevent different clipboard contents
    # after choosing to execute
    script=$(xclip -o)
    cat -A <<< $script
    printf "\nExecute? (y/n): "
    read execute
    # only execute when 'y' was answered
    # all other input is ignored
    if [[ "$execute" == "y" ]]; then
        eval "$script"
    fi
}
# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
cf() {
  local file

  file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

  if [[ -n $file ]]
  then
     if [[ -d $file ]]
     then
        cd -- $file
     else
        cd -- ${file:h}
     fi
  fi
}

# g - use terminal as a launcher
g() {
  xdg-open $1 & exit
}
alias ge='g "$(echol)"'

# fasd integration
eval "$(fasd --init auto)"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
